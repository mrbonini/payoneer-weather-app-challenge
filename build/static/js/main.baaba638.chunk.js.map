{"version":3,"sources":["pages/weather/components/Loading.js","pages/weather/slice/constants.js","store/factories.js","pages/weather/slice/actions.js","pages/weather/slice/reducer.js","pages/weather/slice/selector.js","assets/weather.jpeg","pages/weather/Weather.js","reducers/index.js","store/index.js","App.js","reportWebVitals.js","index.js"],"names":["styles","makeStyles","root","height","Loading","props","classes","hasError","Container","maxWidth","Grid","className","container","direction","justify","alignItems","BASE_SLICE_PATH","generalControl","store","payload","_","mergeWith","objValue","srcValue","isArray","getResource","tempScale","a","Axios","get","constantsBasePath","constants","CONTROL_VIEW","CONTROL_DATA","controlView","type","controlData","createSliceBasicActions","defaultView","isLoading","error","undefined","page","selectedCard","defaultData","city","list","barCharts","selectedTemperature","createSliceReducer","view","data","initialState","state","action","produce","draft","selectDefault","weather","reducer","selectWeatherData","createSelector","selectWeatherView","padding","isDesktop","background","section","margin","cardBody","position","cardContent","marginTop","marginBottom","cardImage","top","left","opacity","pageButton","barContainer","width","border","cardTitle","textAlign","mainText","fontSize","fontWeight","text","Weather","dispatch","useDispatch","useSelector","handleChange","useCallback","e","actions","target","value","handleCarousel","newPage","cardsByDay","useMemo","forEach","info","Object","keys","length","foundDate","find","day","moment","isSame","dt_txt","split","push","maxPage","Math","round","cardsToRender","cardsArr","cardDate","i","useEffect","status","message","RadioGroup","onChange","FormControlLabel","control","Radio","color","label","labelPlacement","IconButton","onClick","Icon","spacing","map","card","idx","firstCard","item","xs","sm","md","style","scroll","scrollToBottom","WeatherCard","date","format","mainWeather","main","temp","humidity","maxTemp","temp_max","minTemp","temp_min","bar","percentage","WeatherBarCharts","time","Button","variant","scrollToTop","Typography","bottom","Card","raised","CardActionArea","CardContent","src","WeatherImage","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baaba638.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Grid, makeStyles } from '@material-ui/core'\n\nconst styles = makeStyles({\n    root: {\n        height: '100vh'\n    }\n});\n\nexport default function Loading(props) {\n    const classes = styles();\n    const { hasError } = props;\n    \n    return (\n        <Container maxWidth='xl'>\n            <Grid className={classes.root} container direction='row' justify='center' alignItems='center'>\n                { hasError ? hasError : 'LOADING...' }\n            </Grid>\n        </Container>\n    )\n}","export const BASE_SLICE_PATH = `App/Weather`;","import produce from \"immer\";\nimport _ from \"lodash\";\n\nfunction generalControl(store, payload) {\n    return _.mergeWith(store, payload, (objValue, srcValue) => {\n        if (_.isArray(objValue)) {\n            return srcValue;\n        }\n    });\n}\n\nexport function createSliceReducer(\n    view = {},\n    data = {},\n    constantsBasePath = ''\n) {\n    if (!constantsBasePath) return;\n\n    const initialState = { view, data };\n\n    const constants = {\n        CONTROL_VIEW: `${constantsBasePath}/CONTROL_VIEW`,\n        CONTROL_DATA: `${constantsBasePath}/CONTROL_DATA`\n    }\n\n    return (state = initialState, action) => produce(state, draft => {\n        switch(action.type) {\n            case constants.CONTROL_VIEW: {\n                const { payload } = action;\n                generalControl(draft, { view: payload });\n                break;\n            }\n            case constants.CONTROL_DATA: {\n                const { payload } = action;\n                generalControl(draft, { data: payload });\n                break;\n            }\n        }\n    });\n}\n\nexport function createSliceBasicActions(constantsBasePath = '') {\n    if (!constantsBasePath) return;\n\n    const constants = {\n        CONTROL_VIEW: `${constantsBasePath}/CONTROL_VIEW`,\n        CONTROL_DATA: `${constantsBasePath}/CONTROL_DATA`\n    }\n\n    return {\n        controlView: (payload) => ({\n            type: constants.CONTROL_VIEW,\n            payload,\n        }),\n        controlData: (payload) => ({\n            type: constants.CONTROL_DATA,\n            payload,\n        })\n    }\n}","import { BASE_SLICE_PATH } from \"./constants\";\nimport Axios from 'axios';\nimport { createSliceBasicActions } from \"../../../store/factories\";\n\nconst API_PATH = 'https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40';\n\nconst getResource = async (tempScale) => Axios.get(`${API_PATH}&units=${tempScale === 'celcius' ? 'metric' : 'imperial'}`);\n\nconst { controlView, controlData } = createSliceBasicActions(BASE_SLICE_PATH)\n\nexport { controlView, controlData };\n\nexport const getWeatherData = tempScale => async dispatch => {\n    try {\n        dispatch(controlView({ isLoading: true, selectedCard: null }));\n\n        const { data, status } = await getResource(tempScale);\n        if ( status === 200 ) {\n            dispatch(controlData({ city: data.city, list: data.list, barCharts: [] }));\n            dispatch(controlView({ isLoading: false }));\n        };\n    } catch (err) {\n        dispatch(controlView({\n            isLoading: false,\n            hasError: true, \n            error: err.message || 'It wasnt possible to load the weather data. Please try again later'\n        }))\n    }\n};","import { BASE_SLICE_PATH } from \"./constants\";\nimport { createSliceReducer } from \"../../../store/factories\";\n\nconst defaultView = {\n    isLoading: false,\n    hasError: false,\n    error: undefined,\n    page: 0,\n    selectedCard: null\n};\n\nconst defaultData = {\n    city: {},\n    list: [],\n    barCharts: [],\n    selectedTemperature: 'fahrenheit',\n};\n\nexport const initialState = {\n    view: defaultView,\n    data: defaultData\n};\n\nexport default createSliceReducer(defaultView, defaultData, BASE_SLICE_PATH);","import { createSelector } from 'reselect';\nimport reducer from './reducer';\n\nconst selectDefault = (state) => state.weather || reducer.initialState;\n\nexport const selectWeatherData = createSelector(\n    [selectDefault],\n    (state) => state.data\n);\n\nexport const selectWeatherView = createSelector(\n    [selectDefault],\n    (state) => state.view\n);","export default __webpack_public_path__ + \"static/media/weather.0e7a6500.jpeg\";","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { Button, Card, CardActionArea, CardContent, Container, FormControlLabel, Grid, Icon, IconButton, makeStyles, Radio, RadioGroup, Typography } from '@material-ui/core';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loading from './components/Loading';\nimport * as actions from './slice/actions';\nimport { selectWeatherData, selectWeatherView } from './slice/selector';\nimport { isDesktop } from \"react-device-detect\";\nimport { animateScroll as scroll } from 'react-scroll';\nimport WeatherImage from '../../assets/weather.jpeg';\nimport moment from 'moment';\n\nconst styles = makeStyles({\n    root: {\n        padding: isDesktop ? '2em 10em' : '2em',\n        background: 'aliceblue',\n        height: '100%'\n    },\n    section: {\n        margin: '2em 0'\n    },\n    cardBody: {\n        position: 'relative',\n    },\n    cardContent: {\n        marginTop: '4em',\n        marginBottom: '4em'\n    },\n    cardImage: {\n        height: '100%', \n        position: 'absolute', \n        maxWidth: '-webkit-fill-available', \n        top: 0, \n        left: 0, \n        opacity: 0.5, \n    },\n    pageButton: {\n        padding: 0\n    },\n    barContainer: {\n        position: 'relative', \n        height: '200px', \n        width: 'auto', \n        border: '1px solid black', \n        marginBottom: '1em'\n    },\n    cardTitle: {\n        textAlign: 'center'\n    },\n    mainText: {\n        fontSize: '2em',\n        fontWeight: 600,\n        textAlign: 'center'\n    },\n    text: {\n        textAlign: 'center',\n        fontSize: '1.25em'\n    }\n});\n\nexport default function Weather(props) {\n    const dispatch = useDispatch();\n    const classes = styles();\n\n    const pageSize = 3;\n    \n    const view = useSelector(selectWeatherView);\n    const data = useSelector(selectWeatherData);\n\n    const handleChange = useCallback((e) => {\n        dispatch(actions.controlData({selectedTemperature: e.target.value}))\n    }, []);\n\n    const handleCarousel = useCallback((direction) => {\n        let newPage = null;\n        dispatch(actions.controlData({barCharts: []}));\n        dispatch(actions.controlView({selectedCard: null}));\n        if ( direction === 'previous' ) {\n            newPage = +view.page - 1\n            return dispatch(actions.controlView({page: newPage}))\n        }\n        newPage = +view.page + 1\n        dispatch(actions.controlView({page: newPage}))\n    }, [view.page]);\n\n    const cardsByDay = useMemo(() => {\n        const cardsByDay = {};\n        data?.list?.forEach(info => {\n            if( Object.keys(cardsByDay)?.length ) {\n                const foundDate = Object.keys(cardsByDay).find(day => {\n                    return moment(day).isSame(moment(info.dt_txt.split(' ')[0]))\n                });\n                return foundDate \n                    ? cardsByDay[foundDate].push(info) \n                    : cardsByDay[info.dt_txt.split(' ')[0]] = [info];\n            } else cardsByDay[info.dt_txt.split(' ')[0]] = [info]\n        });\n        \n        return cardsByDay\n    }, [data.list]);\n\n    const maxPage = useMemo(() => {\n        return Math.round(Object.keys(cardsByDay).length/pageSize);\n    }, [pageSize, cardsByDay])\n\n    const cardsToRender = useMemo(() => {\n        const cardsArr = []\n        \n        Object.keys(cardsByDay).forEach((cardDate, i) => {\n            if (pageSize * view.page <= i && cardsArr.length < pageSize) {\n                cardsArr.push({[cardDate]: cardsByDay[cardDate]})\n            }\n        });\n\n        return cardsArr\n    }, [cardsByDay, view.page]);\n\n    useEffect(() => {\n        dispatch(actions.getWeatherData(data.selectedTemperature))\n    }, [data.selectedTemperature]);\n\n    return (\n        view.isLoading ?\n        <Loading />\n        : view.hasError ?\n        <Loading hasError={view.error} />\n        : <Container className={classes.root} maxWidth='lg'>\n            <Grid className={classes.section} container direction='row' justify='space-between' alignItems='center'>\n                <RadioGroup value={data.selectedTemperature} onChange={handleChange} >\n                    <FormControlLabel value=\"celcius\" control={<Radio color='primary' />} label=\"Celcius\" />\n                </RadioGroup>\n                <RadioGroup value={data.selectedTemperature} onChange={handleChange} >\n                    <FormControlLabel value=\"fahrenheit\" control={<Radio color='primary' />} label=\"Fahrenheit\" labelPlacement='start' />\n                </RadioGroup>\n            </Grid>\n            <Grid className={classes.section} container direction='row' justify='space-between' alignItems='center'>\n                {\n                    view.page === 0 ? <span/> \n                    : \n                    <IconButton className={classes.pageButton} onClick={() => handleCarousel('previous')}>\n                        <Icon className='fas fa-arrow-left' color='primary' />\n                    </IconButton>\n                }\n                {\n                    +view.page + 1 >= maxPage ? <span /> \n                    : \n                    <IconButton className={classes.pageButton} onClick={() => handleCarousel('next')}>\n                        <Icon className='fas fa-arrow-right' color='primary' />\n                    </IconButton>\n                }\n            </Grid>\n            <Grid className={classes.section} container direction='row' justify='space-evenly' alignItems='center' spacing={2}>\n                {\n                    cardsToRender?.length &&\n                    cardsToRender.map((card, idx) => {\n                        const firstCard = card[Object.keys(card)[0]][0];\n\n                        return (\n                            <Grid \n                                key={`card-${idx}`}\n                                item \n                                xs={10} sm={5} md={4} \n                                style={{\n                                    opacity: view.selectedCard === idx ? 0.5 : 1\n                                }}\n                                onClick={() => {\n                                    dispatch(actions.controlData({barCharts: card[Object.keys(card)[0]]}));\n                                    dispatch(actions.controlView({selectedCard: idx}));\n                                    scroll.scrollToBottom();\n                                }}\n                            >\n                                <WeatherCard \n                                    date={moment(firstCard.dt_txt.split(' ')[0]).format('DD, MMM YYYY')}\n                                    mainWeather={\n                                        firstCard.weather[0]?.main === 'Clouds' ? 'fas fa-cloud' \n                                        : firstCard.weather[0]?.main === 'Rain' ? 'fas fa-cloud-rain'\n                                        : 'fas fa-sun'\n                                    }\n                                    temp={`${firstCard.main.temp}°${data.selectedTemperature === 'celcius' ? 'C' : 'F'}`}\n                                    humidity={`${firstCard.main.humidity}%`}\n                                    maxTemp={`${firstCard.main.temp_max}°${data.selectedTemperature === 'celcius' ? 'C' : 'F'}`}\n                                    minTemp={`${firstCard.main.temp_min}°${data.selectedTemperature === 'celcius' ? 'C' : 'F'}`}\n                                />\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n            <Grid className={classes.section} container direction='row' justify='space-evenly' alignItems='center' spacing={1}>\n                {\n                    data?.barCharts?.length ?\n                    data.barCharts.map((bar, idx) => {\n                        const percentage = data.selectedTemperature === 'celcius' ? bar.main.temp : (bar.main.temp - 32) * (5 / 9)\n                        \n                        return <Grid item xs={3} sm ={2} md={1} key={`bar-chart-${idx}`} >\n                            <WeatherBarCharts\n                                time={bar.dt_txt.split(' ')[1]}\n                                percentage={percentage}\n                                temp={`${isDesktop ? bar.main.temp : Math.round(bar.main.temp)}° ${data.selectedTemperature === 'celcius' ? 'C' : 'F'}`}\n                            />\n                        </Grid>\n                    })\n                    : null\n                }\n                <Grid container item direction='row' justify='center' xs={12}>\n                    {\n                        data?.barCharts?.length && !isDesktop ?\n                        <Button variant='contained' color='primary' onClick={() => scroll.scrollToTop()}>\n                            Back to top\n                        </Button>\n                        : null\n                    }\n                </Grid>\n            </Grid>\n        </Container>\n    )\n};\n\nfunction WeatherBarCharts(props) {\n    const { percentage, temp, time } = props;\n    const classes = styles();\n\n    return (\n        <>\n            <Typography style={{textAlign: 'center'}}>\n                {time}\n            </Typography>\n            <div className={classes.barContainer}>\n                <div style={{\n                    height: percentage < 0 ? `${percentage * -1}%` : `${percentage}%`,\n                    background: percentage < 0 ? 'blue' : 'red',\n                    width: '100%',\n                    position: 'absolute',\n                    bottom: percentage < 0 ? null : 0,\n                    top: percentage > 0 ? null : 0\n                }}\n                />\n            </div>\n            <Typography style={{textAlign: 'center'}}>\n                {temp}\n            </Typography>\n        </>\n    )\n}\n\nfunction WeatherCard(props) {\n    const { date, temp, humidity, maxTemp, minTemp, mainWeather } = props\n    const classes = styles();\n\n    return (\n        <Card raised className={classes.cardBody}>\n            <CardActionArea>\n                <CardContent>\n                    <img src={WeatherImage} className={classes.cardImage} />\n                    <Grid className={classes.cardContent} container direction='row' justify='center' alignItems='flex-start' spacing={3}>\n                        <Grid item xs={12} className={classes.cardTitle}>\n                            <Typography variant='h4'>\n                                Munich, DE <Icon style={{width: '2em'}} className={mainWeather} />\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={12} />\n                        <Grid item xs={12}>\n                            <Typography className={classes.mainText}> {date} </Typography>\n                        </Grid>\n                        <Grid item container direction='row' justify='center' alignItems='center' xs={12}>\n                            <Grid item xs={6}>\n                                <Typography className={classes.text} style={{fontSize: '2em'}}> \n                                    <Icon className='fas fa-tint' /> {humidity} \n                                </Typography>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Typography className={classes.text} style={{fontSize: isDesktop ? '2em' : '1.5em'}}> \n                                    <Icon className='fas fa-temperature-low' /> \n                                    {temp} \n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        \n                        <Grid item xs={12} className={classes.text}>\n                            <b>Max temperature:</b>\n                        </Grid>\n                        <Typography className={classes.text}> {maxTemp} </Typography>\n                        <Grid item xs={12} className={classes.text}>\n                            <b>Min temperature:</b>\n                        </Grid>\n                        <Typography className={classes.text}> {minTemp} </Typography>\n                    </Grid>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    )\n}","import { combineReducers } from 'redux';\nimport weather from '../pages/weather/slice/reducer';\n\nconst reducers = combineReducers({\n    weather\n});\n\nexport default (state, action) => reducers(state,action);","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from '../reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, {}, composeEnhancers(applyMiddleware(thunk)))\n\nexport { store };","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport Weather from './pages/weather/Weather';\nimport { store } from './store/index';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Weather />\n    </Provider>\n  );\n}\n\nexport default (App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\n\nReactDOM.render(<App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}